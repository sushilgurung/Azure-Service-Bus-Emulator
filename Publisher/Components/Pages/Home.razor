@page "/"
@rendermode InteractiveServer
@using Common.Model
@using Common.Service
@inject IQueueService queueService
@using System.ComponentModel.DataAnnotations
@inject ILogger<Home> Logger
<PageTitle>Home - Publisher</PageTitle>

<h2 class="mb-4">Product Form Publisher</h2>
<div class="container mt-5">

    <EditForm Model="@Product" FormName="ProductForm" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label asp-for="Name" class="form-label">Product Name</label>
            <InputText id="Name" class="form-control" placeholder="Enter product name" @bind-Value="Product!.Name" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Description" class="form-label">Description</label>
            <InputTextArea id="Description" class="form-control" rows="3" placeholder="Enter product description" @bind-Value="Product.Description" />
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Price" class="form-label">Price</label>
            <InputNumber id="Price" class="form-control" placeholder="Enter product price" required @bind-Value="Product.Price" />
            <span asp-validation-for="Price" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Category" class="form-label">Category</label>
            <InputText id="Category" class="form-control" placeholder="Enter product category" @bind-Value="Product.Category" />
            <span asp-validation-for="Category" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>


</div>

@code {
    //[SupplyParameterFromForm] [SupplyParameterFromForm(FormName = "ProductForm")]
    private Product? Product = new Product();
    private async Task HandleValidSubmit()
    {
        await queueService.SendMessageAsync(Product, "queue.1");
        Product = new Product();
    }



}
